%import common.WS
%ignore WS

input_file : "MODULE" "main" (module_body)*
module_body : 
    | "VAR" var_list
    | "ASSIGN" assign_list
    | "LTLSPEC" ltl ";"

type_specifier : "boolean" | enum

var_list : 
    | IDENTIFIER ":" type_specifier ";"
    | IDENTIFIER ":" type_specifier ";" var_list

assign_list : assign | assign_list assign
assign : invar | init | next
invar : IDENTIFIER ":=" expr ";"
init : "init(" IDENTIFIER ")" ":=" expr ";"
next : "next(" IDENTIFIER ")" ":=" expr ";"

expr : basic_expr | case_expr

basic_expr : 
    | enum
    | IDENTIFIER
    | (basic_expr)
    | basic_expr IMPLIES basic_expr
    | basic_expr OR basic_expr
    | basic_expr AND basic_expr
    | basic_expr EQ basic_expr
    | basic_expr NEQ basic_expr
    | basic_expr IN basic_expr
    | NOT basic_expr

case_expr : "case" case_body "esac"
case_body : 
    | basic_expr ":" basic_expr ";"
    | basic_expr ":" basic_expr ";" case_body

ltl : 
    | G ltl
    | F ltl
    | X ltl
    | ltl U ltl
    | ltl R ltl
    | ltl OR ltl
    | ltl IMPLIES ltl
    | ltl AND ltl
    | NOT ltl
    | "(" ltl ")"
    | basic_expr


enum : "{" IDENTIFIER ("," IDENTIFIER)* "}"
IDENTIFIER : /[a-zA-Z_]//[a-zA-Z0-9_\$\#\-]/*
AND : "&"
OR : "|"
IMPLIES : "->"
EQ : "="
NEQ : "!="
NOT : "!"
IN : "in"
G : "G"
F : "F"
X : "X"
U : "U"
R : "V"

